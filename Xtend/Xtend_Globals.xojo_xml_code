<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2021r3" FormatVersion="2" MinIDEVersion="20150400">
<block type="Module" ID="578744319">
 <ObjName>Xtend_Globals</ObjName>
 <ObjContainerID>792471551</ObjContainerID>
 <IsClass>0</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Guard</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>859066367</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Guard(instance As Object) As Boolean</SourceLine>
   <SourceLine>// Returns true if the object is Not Nil (safe to access). </SourceLine>
   <SourceLine>// Returns false if the object is not safe to be accessed (for example return from the calling method).</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// -- Speedup the method:</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// We should check if the object is a WeakRef or method pointer?</SourceLine>
   <SourceLine>If instance IsA WeakRef And instance &lt;&gt; Nil Then</SourceLine>
   <SourceLine>// This is a WeakRef that's not nil, check it's value.</SourceLine>
   <SourceLine>Return (WeakRef(instance).Value &lt;&gt; Nil)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Return</SourceLine>
   <SourceLine>Return (instance &lt;&gt; Nil)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>instance As Object</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Guard</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>315494399</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Guard(mustBeTrue As Boolean) As Boolean</SourceLine>
   <SourceLine>// Returns true if mustBeTrue = True (safe to access). </SourceLine>
   <SourceLine>// Returns false if the object is not safe to be accessed mustBeTrue = False(for example return from the calling method).</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// This method is meant to be a break step or make the code more readable.</SourceLine>
   <SourceLine>// Just like Swift you could use it to end the calling method if the return value is true.</SourceLine>
   <SourceLine>// If false then continue processing the calling method for example:</SourceLine>
   <SourceLine>// Sub DoSomething()</SourceLine>
   <SourceLine>// Var myString As String = ""</SourceLine>
   <SourceLine>// If Guard(myString = "") Then</SourceLine>
   <SourceLine>//   ' Since we got here we show error and return</SourceLine>
   <SourceLine>//   MessageBox "Condition failed, could not continue."</SourceLine>
   <SourceLine>//   Retrun</SourceLine>
   <SourceLine>// End If</SourceLine>
   <SourceLine>// ' Since we go here we are good to DoSomething.. </SourceLine>
   <SourceLine>// End Sub</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// -- Speedup the method:</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Return</SourceLine>
   <SourceLine>Return mustBeTrue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mustBeTrue As Boolean</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
